trigger:
  branches:
    include:
      - main
      - master
    exclude:
      - feature/*

variables:
  terraformVersion: 'latest'
  vmImageName: 'ubuntu-latest'
  # Define these securely in pipeline â†’ Variables (mark secrets)
  # AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
  # AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
  # AWS_DEFAULT_REGION: us-east-1

stages:
# -----------------------
# Stage 1: Terraform Init
# -----------------------
- stage: TerraformInit
  displayName: "Terraform Init"
  pool:
    vmImage: $(vmImageName)
  jobs:
  - job: InitJob
    steps:
    - checkout: self
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: $(terraformVersion)
    - script: terraform init -input=false
      displayName: "Terraform Init"

# -----------------------
# Stage 2: Terraform Plan
# -----------------------
- stage: TerraformPlan
  displayName: "Terraform Plan"
  dependsOn: TerraformInit
  pool:
    vmImage: $(vmImageName)
  jobs:
  - job: PlanJob
    steps:
    - checkout: self
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: $(terraformVersion)
    - script: terraform init -input=false
      displayName: "Terraform Init (Plan stage)"
    - script: terraform validate
      displayName: "Terraform Validate"
    - script: terraform plan -input=false -out=tfplan
      displayName: "Terraform Plan"
    - publish: tfplan
      artifact: terraform-plan

# -----------------------
# Stage 3: Terraform Apply
# -----------------------
- stage: TerraformApply
  displayName: "Terraform Apply"
  dependsOn: TerraformPlan
  condition: succeeded()
  pool:
    vmImage: $(vmImageName)
  jobs:
  - job: ApplyJob
    steps:
    - checkout: self
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: $(terraformVersion)
    - script: terraform init -input=false
      displayName: "Terraform Init (Apply stage)"
    - download: current
      artifact: terraform-plan
    - script: terraform apply -input=false -auto-approve tfplan
      displayName: "Terraform Apply"
